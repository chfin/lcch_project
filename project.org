#+TITLE: LCCH Project
#+Startup: content
# LocalWords:  LCCH Shen

* Ideas

** "Concepts"
- creativity usually guided by "concepts" on different levels
- possible bridge between randomness and determinism
- resembles the overall "plan" as well as a simple "idea"
- concepts can be statements using other concepts (e.g. a scale is a list of notes)
- terms:
  - concept :: pattern, rule, idea
    - used as scaffold or template
  - meta-concept :: a pattern of concepts
    - instances of meta-concepts are concepts again (e.g. a major scale is a scale)
    - in fact no difference to concept, every concept is a meta-concept.
    - instance that is no concept (can not be further instantiated) is the final piece.

*** Examples of concepts in music
- note (duration, pitch, etc)
- rhythm 
- motif
- intervals
- scales
- Sonata form

*** Example of conceptual music
- a composer writes a
  - melody
  - in A-A-B form, consisting of 8+8+8 bars
  - in 4/4
  - in C major (for simplicity between c' and c'')
  - consisting of only quarter notes
- necessary /technical/ concepts:
  - melody :: sequence of *notes*
  - A-A-B form :: 2 melody parts (*melody*), where the first one is repeated
  - bar :: time period containing being an integer multiple of some *note value*
  - 4/4 :: an specific parameter for a *bar*, consisting of 4 *quarter notes*
  - quarter note :: a *note value*, being 1/4 of a whole note
  - C major :: (here:) the ordered set of *note heights*: {c',d',e',f',g',a',h',c''}
  - note :: consists of a *note height* and a *note value*
  - note height :: basic concept, refers to the actual frequency of the played sound
  - note value :: basic concept, a relative time value, together with a tempo results in the note's duration
- necessary /creative/ concepts:
  - one or more ideas which can be
    - concrete parts of music (here only melodies), e.g. a motif or theme
    - concepts combining these (e.g. by repetition)
    - further constraints given by instantiating existing concepts
      (in fact, the chosen set of technical concepts belongs to this group,
      so the used technical concepts are actually creative concepts)
	   
** Concept generation
- extraction from input:
  - source: 
    - given by the user
    - given by other programs / instances of this program
    - created randomly
  - strategy:
    1. try to fit the input into existing concepts
    2. find group concepts and find abstractions (meta-concepts)
- automatic generation:
  to be done
- exchange with other instances:
  somewhat similar to the input based strategy

** Concept usage
- the concept database is used to generate material
- concept engine used as library

*** Forms of material creation
- as a "stream of ideas"
  - continuously generates material randomly from the concepts.
  - simple, fast decisions
  - useful for live use cases, improvising
- in a constructive way:
  - material is a single instance of one meta-concept (e.g. a symphony), generated as a whole
  - material is generated from high-level meta-concepts and repeatedly refined

*** Uses cases
- live performance/improvisation:
  The program gets/generates some initial input and starts to improvise.
  The user can give additional input at runtime to influence the improvisation
  - variant: together with other instances
- offline composition, with/without initial input
  
** Open questions
- can concepts be extended to contain general (logical) knowledge?
- how can actions be derived from concepts?
- model of concepts? (-> Implementation)
- what about David Cohen?

* Implementation

** Ideas

- language:
  - Common Lisp
- pattern extraction:
  1. 'parse' input
     - e.g. two quarter notes c become =<c,4> <c,4>=
  2. abstract step by step:
     - parametric form :: replace parameters by variables, identical parameters (meaning and value) become identical variables
       - e.g. =<c,4> <c,4>= -> =<H,L> <H,L>=
     - structural form :: remove 'types', the /structure/ is left
       - e.g. =<H,L> <H,L>= -> =X X=
     - +relative form+ :: relations between entities are taken into account
       - e.g. =<c,2> <c,4>= -> =<H,L> <H,half(L)>=
     - constrainted form :: variable are constrainted, can express relative form
       - e.g. =X1 X2 X3 : cmaj(X1) cmaj(X2) cmaj(X3)= -> 3 notes from c-major scale
       - e.g. =<H,L1> <H,L2> : double_length(L1,L2)= (see ex. for relative form)
     - semantic abstraction (?) :: this is difficult. Find some abstraction or generalisation of the structural form e.g.
       - =X X= -> "/repeat X N times/"

*** concept language
  - not turing complete (first)
  - only discrete values
  - built in value sets and relations
    - scale / range? (chromatic, diatonic, pentatonic, etc.)
    - intervals?
    - scales? (in terms of sets / successor relations)
  - operators
  - +only structure!+
  - proposed rules:
    - Grammar:
      - =rule = { term } [ ":" { constraint } ];=
      - =term = termvar | note;=
      - =termvar = variable;=
      - =note = "<" height "," duration ">";=
      - =height = heightval | heightvar;=
      - =heightvar = variable;=
      - =duration = durval | durvar;=
      - =durvar = variable;=
      - =constraint = [ "!" ] cname "(" variable { "," variable } ")";=
    - Instatiation:
      - rule is basic instance, if it contains no constraints or variables
      - rule can be instaciated by replacing variables with values:
	- termvars are replaced by basic instances
	- heightvars are replaced by heightvals
	- durvars are replaced by durvals
      - same variables are replaced by the same value in one step
      - variables in constraints are also replaced
      - the value of constraints preceded by "!" is inverted.
      - constraints without variables must evaluate to true
      - true constraints can be removed
      - note that variables may also appear _only_ in the _constraints_!
    - Values:
      - variable :: arbitrary, but for notation purpose all valid C identifiers starting uppercase
      - heightval :: lets start with a pentatonic scale (+ octave): {c', d', e', g', a', c''}
      - durval :: from whole notes to 16ths, no compounds: {1, 2, 4, 8, 16}
      - cname :: denotes constraints, for example:
	- =higher (x: heightval, y: heightval)= -> =x= is higher than =y=
	- =next (x: heightval, y: heightval)= -> =x= is the next higher note after =y=
	- =longer (x: durval, y: durval)= -> =x= is longer than =y=
	- =double_length (x: durval, y: durval)= -> =x= is twice as long as =y=

*** The "brain"
- impro:
  - ideas constantly generated, refined, etc.
  - "pulled" out by timer, requesting the currently most interesting idea
- structure:
  - memory :: contains the complete set of known concepts
    - ideas should be somehow weighted and connected
    - weight resembles roughly the probability to come to the /mind/
    - weight is increased by using similar concepts, decreased by time
    - connections are used to express
      1. semantic connections between concepts
      2. "relatedness" between concepts
	 (used for weighting, bringing stuff to the /mind/, etc.)
  - mind :: Contains currently most interesting concepts.
	    Only concepts in the /mind/ are used for thinking,
	    but concepts similar to the used ones can go to the /mind/,
	    if referred by /mind/-concepts.
    - heap structure (?)
    - weight decreases by time and increases by use
    - weight marks probability to be used in the next step
    - threshold for going to /memory/
      (max. number of concepts in mind, minimum weight, ...)
- possibilities for weight calculation:
  - exponential moving average (alpha = ?)
    - 0 = not used, 1 = used
    - (1/2)^k if shortest path to used concept has k edges
- thinking algorithm:
  1. select concept from /mind/ with probability (w_i / sum(w_i))
  2. think about concept to create a new one (depends on concept language)
  3. determine concepts related to the new concept
  4. assign y to concepts (y=0, if not related, y>0 if related)
  5. calculate new weights w to concepts (exponential moving average)
  6. drop stuff with small weights from /mind/ to /memory/
  7. push stuff with high weights from /memory/ to /mind/
    (good idea? better approaches for /memory/ -> /mind/?)
- relation measure
  - relation coefficient: [0,1], 0=unrelated, 1=identical
  - every concept has a set of related concepts, graph with weighted edges
  - weight of path is product of edge weights
  - "best" path = "heaviest" path
  - path weight used for weight calculation of concepts (weight of nodes)

*** technical stuff
- Audio Output:
  - portmidi library: http://sourceforge.net/apps/trac/portmedia/wiki/portmidi
  - CL bindings: https://github.com/chfin/cl-portmidi

* Goals
My goal for the project is a program generating music live and continuously based on some input given by the user
- main project goals:
  1. [ ] concepts for very basic model (music)
  2. [ ] idea stream
  3. [ ] running program
- optional project goals:
  1. [ ] some kind of concept extraction/generation
  2. [ ] less restricted concept model (still music)
  3. [ ] offline composition mode
- further goals:
  1. [ ] more general concept model
  2. [ ] exchange with other concept databases (collaboration)
     1. [ ] 
